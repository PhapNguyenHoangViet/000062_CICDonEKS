[
{
	"uri": "//localhost:1313/",
	"title": " CI/CD on EKS",
	"tags": [],
	"description": "",
	"content": "CI/CD on EKS with CodePipeline and GitHub Amazon Elastic Kubernetes Service (Amazon EKS) is an AWS-managed container orchestration service that helps us to create, manage, launch, and scale Kubernetes applications in an AWS environment or on– premise.\nAWS CodePipeline is a continuous delivery service that helps you automate deployment pipelines to keep your application or infrastructure up to date with new versions in a consistent manner. CodePipeline automates the build, test, and deployment phases of your deployment each time there is a code change, based on the deployment model you define. You can integrate AWS CodePipeline with third-party services such as GitHub or with your own custom plugin. With AWS CodePipeline, you only pay for what you use. You don’t have to pay upfront or make a long-term commitment.\nIn this exercise, we will create an EKS Cluster and deploy a pipeline to automatically deploy to production every time there is a code change using the AWS CodePipeline service.\n"
},
{
	"uri": "//localhost:1313/3-create-eks-cluster/1-create-eks-cluster/",
	"title": "Create EKS Cluster",
	"tags": [],
	"description": "",
	"content": "Create EKS Cluster To create EKS cluster, we will first have to generate SSH key to be able to access EC2 Node in the Cluster as needed: aws ec2 create-key-pair --key-name k8s-demo --query \u0026#39;KeyMaterial\u0026#39; --output text\u0026gt; k8s-demo.pem In the AWS Console interface Find EC2 Select EC2 In EC2 interface Select Key Pair View Key Pair just created To create EKS Cluster and EC2 Nodes we use the following command: eksctl create cluster --name k8s-demo --region ap-southeast-1 --nodegroup-name k8s-demo --nodes 2 --ssh-access --ssh-public-key k8s-demo --managed When you run this command, eksctl will use AWS CloudFormation to create the necessary infrastructure and setup Master Node (Control Plane). Interface after creating EKS Cluster. It takes about 15 minutes to complete the initialization of EKS Cluster\n"
},
{
	"uri": "//localhost:1313/2-preparation-steps/1-create-iam-user/",
	"title": "Create IAM User",
	"tags": [],
	"description": "",
	"content": "Create IAM User Go to the AWS Console Find IAM Select IAM In the IAM interface Select User Select Add users In Add user step Enter User name, enter aws-eks Select Access key - Programmatic access Select Password - AWS Management Console access Select Custom password Select Show password Uncheck User must create a new password at next sign-in Select Next:Permissions In the next step of Add user Select Attach existing policies directly Select AdministratorAccess Select Next:Tags In Add tags step Enter Key: Name Enter Value: Admin user Check again and select Create user After Add user is successful View created user information Select Download.csv to download information about Access key ID and Secure access key Then select Close View successful user creation information "
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/1-create-s3-bucket/",
	"title": "Create S3 bucket",
	"tags": [],
	"description": "",
	"content": "Create S3 bucket Create this Bucket for CodeBuild to save artifact (generate build.json file after each build). We use the following command: ACCOUNT_ID=$(aws sts get-caller-identity | jq -r \u0026#39;.Account\u0026#39;)\raws s3 mb s3://eks-${ACCOUNT_ID}-codepipeline-artifacts In the AWS Console Find S3 Select S3 In the S3 interface Select S3 Select Bucket View created bucket artifact "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview Kubernetes (K8s) is an open source, extensible platform for managing packaged applications and services, facilitating configuration and automating application deployment.\nIn this lab, we will create a simple Kubernetes Cluster on AWS EKS (Elastic Kubernetes Service). Then I will deploy the site on the cluster and use AWS CodePipeLine for automated deployment. Content Introduction Preparation steps Create EKS cluster Generate Code Pipeline Resource Cleanup "
},
{
	"uri": "//localhost:1313/3-create-eks-cluster/2-check-eks-cluster/",
	"title": "Check EKS Cluster",
	"tags": [],
	"description": "",
	"content": "Check EKS Cluster In the AWS Console Find CloudFormation Select CloudFormation In the CloudFormation interface Select Stack View created stacks Run the command to check the nodes created kubectl get nodes In the AWS Console Find EKS Select EKS In the EKS interface Select Cluster View the created cluster In the AWS Console Find EC2 Select EC2 In the EC2 interface Select Instances View created instances "
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/2-create-codepipeline-service-role/",
	"title": "Create service role for CodePipeline service",
	"tags": [],
	"description": "",
	"content": "Create service role for CodePipeline service CodePileline requires IAM roles to build docker, push image and interact with EKS cluster using kubectl command.\nDownload the json policy files, create role eks-CodePipelineServiceRole and add inline policy from terminal as follows:\nwget https://raw.githubusercontent.com/First-Cloud-Journey/000062-EKSCICD/main/codepipeline/cpAssumeRolePolicyDocument.json\raws iam create-role --role-name eks-CodePipelineServiceRole --assume-role-policy-document file://cpAssumeRolePolicyDocument.json\rwget https://raw.githubusercontent.com/First-Cloud-Journey/000062-EKSCICD/main/codepipeline/cpPolicyDocument.json\raws iam put-role-policy --role-name eks-CodePipelineServiceRole --policy-name codepipeline-access --policy-document file://cpPolicyDocument.json "
},
{
	"uri": "//localhost:1313/2-preparation-steps/2-create-workspace/",
	"title": "Create Workspace",
	"tags": [],
	"description": "",
	"content": "Create Workspace Access the AWS Management Console interface Search CloudShell Select CloudShell In the AWS CloudShell interface Usually, when selecting the AWS CloudShell service, it automatically creates a CLI environment for us to execute commands. However, in some cases, CloudShell may not automatically create one. In such instances, we will click on Open environment – where is the name of the region when opening CloudShell. Copy and paste the following command into the CloudShell Terminal to install tools that support text processing on the command line. sudo yum -y install jq gettext bash-completion Copy and Paste the command below into Terminal of Workspace to update awscli. sudo pip install --upgrade awscli \u0026amp;\u0026amp; hash -r Next we will configure the aws cli to use the current Region. export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)\rexport AWS_REGION=\u0026lt;REGION\u0026gt;\rexport AZS=($(aws ec2 describe-availability-zones --query \u0026#39;AvailabilityZones[].ZoneName\u0026#39; --output text --region $AWS_REGION)) At export AWS_REGION=, Replace the field with the ID of the region where CloudShell is currently open.\nCheck that AWS_REGION has been set to the correct current Region. test -n \u0026#34;$AWS_REGION\u0026#34; \u0026amp;\u0026amp; echo AWS_REGION is \u0026#34;$AWS_REGION\u0026#34; || echo AWS_REGION is not set We will save the configuration information to bash_profile echo \u0026#34;export ACCOUNT_ID=$ACCOUNT_ID\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AWS_REGION=$AWS_REGION\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AZS=${AZS[@]}\u0026#34; | tee -a ~/.bash_profile\raws configure set default.region $AWS_REGION\raws configure get default.region We will use a command to check if CloudShell is using the correct IAM Role. aws sts get-caller-identity --query Arn | grep CloudFormation-Role -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role NOT valid\u0026#34; "
},
{
	"uri": "//localhost:1313/2-preparation-steps/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "Overview To prepare for the lab, we will use CloudShell as a workspace and will need to install some tools for system administration on EKS including kubectl and eksctl. Content Create IAM User Create Workspace Install Kubernetes Tool Install Eksctl Tool "
},
{
	"uri": "//localhost:1313/3-create-eks-cluster/",
	"title": "Create EKS cluster",
	"tags": [],
	"description": "",
	"content": "Overview In this section, we will create an EKS cluster and then deploy the basic web application to this cluster. Content Create EKS Cluster Check EKS Cluster Deploy Application "
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/3-create-codebuid-service-role/",
	"title": "Create service role for CodeBuild service",
	"tags": [],
	"description": "",
	"content": "Create service role for CodeBuild service CodeBuild requires IAM roles to build docker, push images, and interact with the EKS cluster using the kubectl command. Let’s create role eks-CodePipelineServiceRole and add inline policy from terminal CloudShell wget https://raw.githubusercontent.com/First-Cloud-Journey/000062-EKSCICD/main/codebuild/cbAssumeRolePolicyDocument.json\raws iam create-role --role-name eks-CodeBuildServiceRole --assume-role-policy-document file://cbAssumeRolePolicyDocument.json\rwget https://raw.githubusercontent.com/First-Cloud-Journey/000062-EKSCICD/main/codebuild/cbPolicyDocument.json\raws iam put-role-policy --role-name eks-CodeBuildServiceRole --policy-name codebuild-access --policy-document file://cbPolicyDocument.json We check the created role, we do: Go to the AWS Console\nFind IAM\nSelect IAM\nIn the IAM interface Select Role Find eks-Code View the 2 Roles just created "
},
{
	"uri": "//localhost:1313/3-create-eks-cluster/3-deploy-application/",
	"title": "Deploying the application",
	"tags": [],
	"description": "",
	"content": "Deploy application to EKS cluster Deploy a static Website to the EKS Cluster you just created. To deploy, we will first run the following command: kubectl create deployment fcj-workshop --image=awsfcj/000062 awsfcj/00062 is a pre-built image to use in this lab\nTo be able to access the Website from outside the EKS cluster, we will have to deploy a LoadBalancer Service to the cluster with the following command: kubectl expose deployments/fcj-workshop --type=LoadBalancer --port=80 To view information about LoadBalancer above, I will run the following command: kubectl get svc Copy the link in EXTERNAL-IP into the browser to access the website Visit the website "
},
{
	"uri": "//localhost:1313/2-preparation-steps/3-install-kubernetes-tool/",
	"title": "Installing Kubernetes Tool",
	"tags": [],
	"description": "",
	"content": "Installing Kubernetes Tool Copy and Paste the command below into Terminal of Workspace to install kubectl. sudo curl --silent --location -o /usr/local/bin/kubectl \\\rhttps://amazon-eks.s3.us-west-2.amazonaws.com/1.17.11/2020-09-18/bin/linux/amd64/kubectl\rsudo chmod +x /usr/local/bin/kubectl We consider jq like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease as sed, awk , grep. echo \u0026#39;yq() {\rdocker run --rm -i -v \u0026#34;${PWD}\u0026#34;:/workdir mikefarah/yq \u0026#34;$@\u0026#34;\r}\u0026#39; | tee -a ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc Check the installed tools by running the command below. for command in kubectl jq envsubst aws\rdo\rwhich $command \u0026amp;\u0026gt;/dev/null \u0026amp;\u0026amp; echo \u0026#34;$command in path\u0026#34; || echo \u0026#34;$command NOT FOUND\u0026#34;\rdone Enable autocomplete for the kubectl tool by running the command below: kubectl completion bash \u0026gt;\u0026gt; ~/.bash_completion\r. /etc/profile.d/bash_completion.sh\r. ~/.bash_completion Set up version 2.2.0 using AWS Load Balancer Controller echo \u0026#39;export LBC_VERSION=\u0026#34;v2.2.0\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile\r. ~/.bash_profile Information on installing Kubernetes Tool can be found at Kubernetes Tool\n"
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/4-configure-rbac/",
	"title": "Configuring RBAC",
	"tags": [],
	"description": "",
	"content": "Configuring RBAC In order for CodeBuild to interact with EKS, we will modify configMap aws-auth From terminal to which you have connected EKS cluster, get a copy of configMap aws-auth with the command: kubectl get configmaps aws-auth -n kube-system -o yaml \u0026gt; aws-auth.yaml Open the file aws-auth.yaml : nano aws-auth.yaml Edit this aws-auth.yaml file, adding an item in the data.mapRoles array: - groups:\r- system:masters\rrolearn: arn:aws:iam::{$AWS_ACCOUNT_ID}}:role/eks-CodeBuildServiceRole\rusername: codebuild-eks 4. The aws-auth.yaml file after adding the eks-CodeBuildServiceRole role has the following form: Remove the lines metadata.creationTimestamp and metadata.resourceVersion\napiVersion: v1\rdata:\rmapRoles: |\r- groups:\r- system:bootstrappers\r- system:nodes\rrolearn: arn:aws:iam::451085899692:role/eksctl-k8s-demo-nodegroup-k8s-dem-NodeInstanceRole-LYNRCIX49ZOU\rusername: system:node:{{EC2PrivateDNSName}}\r- groups:\r- system:masters\rrolearn: arn:aws:iam::{$AWS_ACCOUNT_ID}}:role/eks-CodeBuildServiceRole\rusername: codebuild-eks\rkind: ConfigMap\rmetadata:\rcreationTimestamp: \u0026#34;2022-04-26T10:21:52Z\u0026#34;\rmanagedFields:\r- apiVersion: v1\rfieldsType: FieldsV1\rfieldsV1:\rf:data:\r.: {}\rf:mapRoles: {}\rmanager: vpcLambda\roperation: Update\rtime: \u0026#34;2022-04-26T10:21:52Z\u0026#34;\rname: aws-auth\rnamespace: kube-system\rresourceVersion: \u0026#34;2691\u0026#34;\ruid: a2862e92-4697-4654-bb19-dc28b17dc21b 5. Apply the changed aws-auth.yaml file from the terminal:\nkubectl apply -f aws-auth.yaml "
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/",
	"title": "Create CI/CD",
	"tags": [],
	"description": "",
	"content": "Overview In the next steps, we will create a Deployment Pipeline using AWS CodePipeline and integrate with the third party tool GitHub. When we change the code on GitHub, our Pipeline will be activated and deploy the new version of the application to the web application we already run on the EKS Cluster. Content Create S3 bucket Create CodePipeline Service Role Create Code Buid Service Role Configure RBAC Forke source code Generate CodePipeline CI/CD Check "
},
{
	"uri": "//localhost:1313/2-preparation-steps/4-install-eksctl/",
	"title": "Installing eksctl",
	"tags": [],
	"description": "",
	"content": "Installing eksctl In this section we will install the eksctl tool into CloudShell Workspace. Run the command to download the eksctl tool. curl --silent --location \u0026#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\u0026#34; | tar xz -C /tmp\rsudo mv -v /tmp/eksctl /usr/local/bin Check if eksctl works or not with the command below. eksctl version Enable bash-completion of eksctl eksctl completion bash \u0026gt;\u0026gt; ~/.bash_completion\r. /etc/profile.d/bash_completion.sh\r. ~/.bash_completion Installation information Eksctl see more at Eksctl\n"
},
{
	"uri": "//localhost:1313/5-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clear stack using AWS CloudFormation console Open the AWS CloudFormation console\nIn the Stack page of AWS CloudFormation, select the Stack that you want to delete\nSelect Delete\nSelect Delete stack\nDelete Repository Open the Amazon ECR console\nOn the navigation bar, select Region containing the repository to be deleted\nSelect Repository\nIn the Repository page, select Private\nSelect Repository to delete and select Delete\nVerify delete Repository and select Delete\nDelete EKSCluster Open Amazon EKS console page\nSelect the cluster to delete and select Delete\nVerify cluster deletion and select Delete\nDelete CloudShell Environment Select Region containing the environment to delete\nIn the CloudShell interface, choose Actions\nSelect Delete\nVerify environment deletion by entering delete and selecting delete\n"
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/5-fork-source-code/",
	"title": "Fork Source Code",
	"tags": [],
	"description": "",
	"content": "Implement Source Code fork Go to Personal Github Access the fork repository at First-Cloud-Journey/000062-websource In the Repository interface Select Fork Take the steps to Create a new fork Repository name, enter 000062-websource Select Create fork Interface after fork source code In the Repository interface Select avatar of Github Select Settings In the Settings interface Select \u0026lt;\u0026gt;Developer settings In the Developer settings interface Select Personal access tokens Select Generate new token In the New personal access token interface Note, enter awsfcj/000062 Expiration, choose 30 days Section Select scopes select repo Select Generate token After creating the token, copy it to use the next steps Complete the source fork process and generate personal access tokens "
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/6-generate-codepipeline/",
	"title": "Create a pipeline",
	"tags": [],
	"description": "",
	"content": "Create a CI/CD pipeline with CodePipeline We will create a CodePipeline using the AWS CloudFormation engine. Select Download CloudFormation template file Ctrl A Ctrl C Create New Text Document.txt Rename code_pipeline_fcj.yml Ctrl V Add in file : rm -f /etc/apt/sources.list.d/sbt.list - rm -f /etc/apt/sources.list.d/sbt.list In the AWS Console Find CloudFormation Select CloudFormation In the CloudFormation interface Select Stacks Select Create stack Select With new resources (standard) In the Create stack interface Select Template is ready Select Upload a template file Select Choose file Select the downloaded CloudFormation template file. Example code_pipeline_fcj.yml Select Next In the Stack name section, enter Eks-stack Next, fill in the following information: User name, enter the name Github Account Enter Access token created Enter the name Repository Enter Branch Enter the name EksCluster Enter EksDeployment Enter EksNamespace Select Next Scroll to the bottom of the page and select Next Scroll to the bottom of the page and select Create stack Complete stack creation In the AWS Console Find CodePipeline Select CodePipeline CI/CD . Process CI/CD process completes when entering Succeeded state Check "
},
{
	"uri": "//localhost:1313/4-generate-code-pipeline/7-cicd-check/",
	"title": "Test CI/CD",
	"tags": [],
	"description": "",
	"content": "Test CI/CD pipeline Go to your GitHub https://github.com/{GITHUB_ACCOUNT}/000062-websource Select the fork repository Open the file index.html, select the edit icon Edit the code in the file index.html. In this article, change the code of the title (line 48) from John Doe to AWS First Cloud Journey Then select Commit changes After pushing the code, CodePipeline will be triggered to execute CodeBuild. Go to the admin page CodePipeline and you will see the status of the pipeline is In Progress Pipele’s has 2 stages: Source Pull source from GitHub Pack source for stage build Build Create Docker image from source Push the image to ECR repository Deploy application updates to EKS cluster Deploy application updates to EKS cluster Wait about 5-10 minutes for the build process to complete and go to Succeeded state. Go to the website URL to see the changes. At this time, the title of the website has changed to AWS First Cloud Journey Congratulations on completing the lab!!!\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]